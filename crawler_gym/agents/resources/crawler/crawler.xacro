<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="crawler">

  <xacro:property name="pi" value="3.14159265359"/>
  <xacro:property name="base_width" value="0.33"/>
  <xacro:property name="base_len" value="0.22"/>
  <xacro:property name="base_depth" value="0.06"/>
  <xacro:property name="base_z_offset" value="0.0425"/>


  <!-- this represent the triangle prism head, but there is no predefined shape in URDF -->
  <xacro:property name="head_radius" value="0.088"/>
  <xacro:property name="head_depth" value="0.06"/>
  <xacro:property name="head_x_offset" value="${base_len/2}"/>
  <xacro:property name="head_y_offset" value="0.0"/>
  <xacro:property name="head_z_offset" value="0.0"/>

  <xacro:property name="front_wheel_radius" value="0.025"/>
  <xacro:property name="front_wheel_length" value="0.055"/>
  <xacro:property name="front_wheel_x_offset" value="0.0"/>
  <xacro:property name="front_wheel_y_offset" value="0.070"/>
  <xacro:property name="front_wheel_z_offset" value="-0.03"/>
  
  <xacro:property name="front_wheel_mass" value="0.5"/>
  

  <!-- Rear wheel is a caster wheel but we represent it with a 
       sphere -->
  <!--xacro:property name="rear_wheel_radius" value=".02"/-->
  <xacro:property name="rear_wheel_radius" value=".02"/>
  <xacro:property name="rear_wheel_width" value=".04"/>

  <xacro:property name="rear_wheel_x_offset" value="-0.13"/>
  <xacro:property name="rear_wheel_arm" value="0.02"/>
  <xacro:property name="rear_wheel_y_offset" value="0.0"/>
  <xacro:property name="rear_wheel_z_offset" value="-0.035"/>
  
  <xacro:property name="rear_wheel_mass" value="0.5"/>

  <!-- Plugin Variables-->  
  <xacro:property name="wheel_separation" value="0.138"/>

  <!--Interial macros-->
  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0" iyy="${m*(3*r*r+h*h)/12}" iyz = "0" izz="${m*r*r/2}"/> 
    </inertial>
  </xacro:macro>

  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m / 12.0 * (d*d + h*h)}" ixy="0.0" ixz="0.0" iyy="${m / 12.0 * (w*w + h*h)}" iyz="0.0" izz="${m / 12.0 * (w*w + d*d)}"/>
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${2.0*m*(r*r)/5.0}" ixy="0.0" ixz="0.0" iyy="${2.0*m*(r*r)/5.0}" iyz="0.0" izz="${2.0*m*(r*r)/5.0}"/>
    </inertial>
  </xacro:macro>


  <!-- Base Footprint -->
  <link name="base_footprint">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <!--xacro:box_inertia m="0.01" w="0.001" h="0.001" d="0.001"/-->
  </link>

  <!--Base link for the main body-->
  <link name="base_link">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <xacro:box_inertia m="0.01" w="${base_len}" h="${base_width}" d="${base_depth}"/>
    <!-- <visual>
      <origin xyz="-0.03 0 0.03" rpy="-1.57 0 -1.57"/>
      <geometry>
        <mesh filename="file:///$(find crawler_description)/meshes/Altiscan2t_no_wheels.dae"/>
      </geometry>
    </visual> -->
    <collision>
      <geometry>
        <box size="${base_len} ${base_width} ${base_depth}"/>
      </geometry>
    </collision>
  </link>

    <!--base_link to base_footprint Joint-->
    <joint name="base_link_joint" type="fixed">
      <origin xyz="0 0 ${base_z_offset}" rpy="0 0 0" />
      <parent link="base_footprint"/>
      <child link="base_link" />
    </joint>

  <!--Front wheel & joint macro-->
  <xacro:macro name="wheel" params="prefix reflect">
    <link name="${prefix}_front_wheel">
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${front_wheel_radius}" length="${front_wheel_length}"/>
        </geometry>
      </collision>
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${front_wheel_radius}" length="${front_wheel_length}"/>
        </geometry>
      </visual>
      <surface>
        <friction>
          <ode>
            <mu>100.0</mu>
            <mu2>100.0</mu2>
          </ode>
        </friction>
      </surface>
      <xacro:cylinder_inertia m="${front_wheel_mass}" r="${front_wheel_radius}" h="${front_wheel_length}"/>
    </link>

    <joint name="${prefix}_front_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_front_wheel"/>
      <origin xyz="${front_wheel_x_offset} ${front_wheel_y_offset*reflect} ${front_wheel_z_offset}" rpy="0 0 0"/>
    </joint>
  </xacro:macro>

  <!--Create Left & Right Wheel links/joints-->
  <xacro:wheel prefix="left" reflect="1"/>
  <xacro:wheel prefix="right" reflect="-1"/>


  <!--Caster Wheel Joint-->
  <joint name="caster_wheel_base_joint" type="continuous">
    <axis xyz="0 0 1" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="caster_wheel_base"/>
    <origin xyz="${rear_wheel_x_offset} ${rear_wheel_y_offset} 0" rpy="0 0 0"/>
  </joint>
  
  <!--Caster Wheel Link-->
  <link name="caster_wheel_base">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <xacro:box_inertia m="0.2" w="0.001" h="0.001" d="0.001"/>
  </link>

  <joint name="caster_wheel_joint" type="continuous">
    <axis xyz="0 1 0" rpy="0 0 0"/>
    <parent link="caster_wheel_base"/>
    <child link="caster_wheel"/>
    <origin xyz="${-rear_wheel_arm} 0 ${rear_wheel_z_offset}" rpy="0 0 0"/>
  </joint>
  
  <link name="caster_wheel">
    <collision>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
      <geometry>
        <cylinder radius="${rear_wheel_radius}" length="${rear_wheel_width}"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
      <geometry>
        <cylinder radius="${rear_wheel_radius}" length="${rear_wheel_width}"/>
      </geometry>
    </visual>
    <surface>
      <friction>
        <ode>
          <mu>100.0</mu>
          <mu2>100.0</mu2>
        </ode>
      </friction>
    </surface>
    <xacro:cylinder_inertia m="${rear_wheel_mass}" r="${rear_wheel_radius}" h="${rear_wheel_width}"/>
  </link>

</robot>